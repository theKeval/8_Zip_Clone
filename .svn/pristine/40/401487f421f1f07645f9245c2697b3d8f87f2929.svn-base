using _8_Zip.UserControls;
using Callisto.Controls;
using SharpCompress.Archive.GZip;
using SharpCompress.Archive.Rar;
using SharpCompress.Common;
using SharpCompress.Writer;
using SharpCompress.Writer.GZip;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using Windows.Foundation;
using Windows.Foundation.Collections;
using Windows.Storage;
using Windows.Storage.Pickers;
using Windows.Storage.Search;
using Windows.UI;
using Windows.UI.Popups;
using Windows.UI.Xaml;
using Windows.UI.Xaml.Controls;
using Windows.UI.Xaml.Controls.Primitives;
using Windows.UI.Xaml.Data;
using Windows.UI.Xaml.Input;
using Windows.UI.Xaml.Media;
using Windows.UI.Xaml.Navigation;

// The Basic Page item template is documented at http://go.microsoft.com/fwlink/?LinkId=234237

namespace _8_Zip
{
    /// <summary>
    /// A basic page that provides characteristics common to most applications.
    /// </summary>
    public sealed partial class CompressHomePage : _8_Zip.Common.LayoutAwarePage
    {
        public CompressHomePage()
        {
            this.InitializeComponent();
        }

        /// <summary>
        /// Populates the page with content passed during navigation.  Any saved state is also
        /// provided when recreating a page from a prior session.
        /// </summary>
        /// <param name="navigationParameter">The parameter value passed to
        /// <see cref="Frame.Navigate(Type, Object)"/> when this page was initially requested.
        /// </param>
        /// <param name="pageState">A dictionary of state preserved by this page during an earlier
        /// session.  This will be null the first time a page is visited.</param>
        protected override void LoadState(Object navigationParameter, Dictionary<String, Object> pageState)
        {
        }

        /// <summary>
        /// Preserves state associated with this page in case the application is suspended or the
        /// page is discarded from the navigation cache.  Values must conform to the serialization
        /// requirements of <see cref="SuspensionManager.SessionState"/>.
        /// </summary>
        /// <param name="pageState">An empty dictionary to be populated with serializable state.</param>
        protected override void SaveState(Dictionary<String, Object> pageState)
        {
        }


        StorageFile ZipToWrite;
        //public List<StorageFile> OC_selectedFiles;

        protected override void OnNavigatedTo(NavigationEventArgs e)
        {
            base.OnNavigatedTo(e);

            try
            {
                ZipToWrite = (StorageFile)e.Parameter;
                pageTitle.Text = ZipToWrite.DisplayName;
            }
            catch (Exception ex)
            {
                MessageDialog ms = new MessageDialog(ex.Message);
                ms.ShowAsync();
            }

        }

        private void BtnGoUp_Tapped(object sender, TappedRoutedEventArgs e)
        {

        }

        private void gv_contentViewer_SelectionChanged_1(object sender, SelectionChangedEventArgs e)
        {

        }

        public ArchiveType archiveType;
        private async void Btn_AddFiles_Tapped(object sender, TappedRoutedEventArgs e)
        {
            isBusy.IsBusy = true;

            var obj_compressionInfo = new CompressionInfo()
            {
                DeflateCompressionLevel = App.selectedLevel,
                Type = App.selectedMethod
            };

            try
            {
                using (var zipStream = await ZipToWrite.OpenStreamForWriteAsync())
                {
                    var type = ZipToWrite.FileType;

                    switch (type)
                    {
                        case ".zip":
                            archiveType = ArchiveType.Zip;
                            break;

                        case ".gz":
                            archiveType = ArchiveType.GZip;
                            break;

                        case ".bz2":
                            archiveType = ArchiveType.Zip;
                            break;

                        case ".tar":
                            archiveType = ArchiveType.Tar;
                            break;

                        //case ".rar":
                        //    archiveType = ArchiveType.Rar;
                        //    break;

                        //case ".sevenzip":
                        //    archiveType = ArchiveType.SevenZip;
                        //    break;

                        default:
                            break;
                    }

                    if (archiveType != ArchiveType.GZip)
                    {
                        var FilesPicker = new FileOpenPicker();
                        FilesPicker.CommitButtonText = "Compress";
                        FilesPicker.FileTypeFilter.Add("*");
                        FilesPicker.SuggestedStartLocation = PickerLocationId.DocumentsLibrary;

                        var OC_selectedFiles = await FilesPicker.PickMultipleFilesAsync();

                        if (OC_selectedFiles.Count != 0)
                        {
                            if (archiveType != ArchiveType.Tar)
                            {
                                using (var zipWriter = WriterFactory.Open(zipStream, archiveType, obj_compressionInfo))  //(zip, archiveType, CompressionType.None))
                                {
                                    foreach (var singleFile in OC_selectedFiles)
                                    {

                                        zipWriter.Write(singleFile.Name, await singleFile.OpenStreamForReadAsync());

                                        //zipWriter.Write(singleFile.Name, singleFile.OpenStreamForReadAsync);
                                        //zipWriter.Write(Path.GetFileName(file), filePath);
                                    }
                                }
                            }
                            else if (archiveType == ArchiveType.Tar)
                            {
                                using (var tarWriter = WriterFactory.Open(zipStream, archiveType, CompressionType.None))
                                {
                                    foreach (var singleFile in OC_selectedFiles)
                                    {
                                        tarWriter.Write(singleFile.Name, await singleFile.OpenStreamForReadAsync());
                                    }
                                }
                            }

                            isBusy.IsBusy = false;

                            MessageDialog ms = new MessageDialog("Archive successfully created.", "RAR Extractor");
                            await ms.ShowAsync();

                            this.Frame.Navigate(typeof(HomePage));
                        }
                    }
                    else if (archiveType == ArchiveType.GZip)
                    {
                        var filePicker = new FileOpenPicker();
                        filePicker.CommitButtonText = "Compress";
                        filePicker.FileTypeFilter.Add("*");
                        filePicker.SuggestedStartLocation = PickerLocationId.DocumentsLibrary;

                        var selectedFile = await filePicker.PickSingleFileAsync();

                        if (selectedFile != null)
                        {
                            using (GZipWriter writer = new GZipWriter(zipStream))
                            {
                                writer.Write(selectedFile.Name, await selectedFile.OpenStreamForReadAsync());
                            }

                            isBusy.IsBusy = false;

                            MessageDialog ms = new MessageDialog("Archive successfully created.", "RAR Extractor");
                            await ms.ShowAsync();

                            this.Frame.Navigate(typeof(HomePage));
                        }

                        #region commented - tries
                        //using (var gzipWriter = GZipWriter)
                        //{

                        //}

                        //using (var gzipArchive = GZipArchive.Open(zip))
                        //{
                        //    gzipArchive.AddEntry(selectedFile.Path, await selectedFile.OpenStreamForReadAsync());
                        //    //gzipArchive.SaveTo(await selectedFile.OpenStreamForReadAsync());
                        //    //gzipArchive.AddEntry(selectedFile.Path, await selectedFile.OpenStreamForReadAsync());
                        //    //gzipArchive.AddEntry(
                        //}
                        #endregion
                    }
                }
            }
            catch (Exception ex)
            {
                isBusy.IsBusy = false;

                MessageDialog ms = new MessageDialog(ex.Message);
                ms.ShowAsync();
            }
            finally
            {
                isBusy.IsBusy = false;
            }
        }

        private async void Btn_AddFolder_Tapped(object sender, TappedRoutedEventArgs e)
        {
            isBusy.IsBusy = true;

            try
            {
                using (var zip = await ZipToWrite.OpenStreamForWriteAsync())
                {
                    var type = ZipToWrite.FileType;

                    switch (type)
                    {
                        case ".zip":
                            archiveType = ArchiveType.Zip;
                            break;

                        case ".gz":
                            archiveType = ArchiveType.GZip;
                            break;

                        case ".bz2":
                            archiveType = ArchiveType.Zip;
                            break;

                        case ".tar":
                            archiveType = ArchiveType.Tar;
                            break;

                        default:
                            break;
                    }

                    if (archiveType != ArchiveType.GZip)
                    {
                        var folderPicker = new FolderPicker();
                        folderPicker.CommitButtonText = "select folder";
                        folderPicker.FileTypeFilter.Add("*");
                        folderPicker.SuggestedStartLocation = PickerLocationId.ComputerFolder;

                        var selectedFolder = await folderPicker.PickSingleFolderAsync();

                        if (selectedFolder != null)
                        {
                            string[] splitedPathOfFolder = selectedFolder.Path.Split('\\');
                            int folderNameLenght = splitedPathOfFolder.Last().Length;
                            int selectedFolderPathLenght = selectedFolder.Path.Length;
                            int substringLenght = selectedFolderPathLenght - folderNameLenght;

                            if (archiveType != ArchiveType.Tar)
                            {
                                using (var zipWriter = WriterFactory.Open(zip, archiveType, CompressionType.Deflate))  //(zip, archiveType, CompressionType.None))
                                {
                                    foreach (var singleFile in await selectedFolder.GetFilesAsync(CommonFileQuery.OrderByName))
                                    {
                                        string subStringToConsider = singleFile.Path.Substring(substringLenght - 1);

                                        zipWriter.Write(subStringToConsider, await singleFile.OpenStreamForReadAsync());
                                        //zipWriter.Write(singleFile.Name, singleFile.OpenStreamForReadAsync);
                                        //zipWriter.Write(Path.GetFileName(file), filePath);
                                    }
                                }
                            }
                            else if (archiveType == ArchiveType.Tar)
                            {
                                using (var zipWriter = WriterFactory.Open(zip, archiveType, CompressionType.None))  //(zip, archiveType, CompressionType.None))
                                {
                                    foreach (var singleFile in await selectedFolder.GetFilesAsync(CommonFileQuery.OrderByName))
                                    {
                                        string subStringToConsider = singleFile.Path.Substring(substringLenght - 1);

                                        zipWriter.Write(subStringToConsider, await singleFile.OpenStreamForReadAsync());
                                        //zipWriter.Write(singleFile.Name, singleFile.OpenStreamForReadAsync);
                                        //zipWriter.Write(Path.GetFileName(file), filePath);
                                    }
                                }
                            }

                            isBusy.IsBusy = false;

                            MessageDialog ms = new MessageDialog("Archive successfully created.", "RAR Extractor");
                            await ms.ShowAsync();

                            this.Frame.Navigate(typeof(HomePage));
                        }
                    }

                    #region GZip can not contain folder - commented
                    //else if (archiveType == ArchiveType.GZip)
                    //{
                    //    var filePicker = new FileOpenPicker();
                    //    filePicker.CommitButtonText = "Compress";
                    //    filePicker.FileTypeFilter.Add("*");
                    //    filePicker.SuggestedStartLocation = PickerLocationId.DocumentsLibrary;

                    //    var selectedFile = await filePicker.PickSingleFileAsync();

                    //    using (GZipWriter writer = new GZipWriter(zip))
                    //    {
                    //        writer.Write(selectedFile.Name, await selectedFile.OpenStreamForReadAsync());
                    //    }
                    //}
                    #endregion
                }
            }
            catch (Exception ex)
            {
                isBusy.IsBusy = false;

                MessageDialog ms = new MessageDialog(ex.Message);
                ms.ShowAsync();
            }
            finally
            {
                isBusy.IsBusy = false;
            }
        }


        public Flyout f = new Flyout();
        //public Grid g = new Grid();        
        //public ComboBox cb = new ComboBox();
        public static bool flag = true;
        private void Btn_CompressionMethod_Tapped(object sender, TappedRoutedEventArgs e)
        {
            Flyout f = new Flyout();
            f.Margin = new Thickness(20, 12, 20, 12);
            f.Content = new CompressionOptions();
            f.Placement = PlacementMode.Top;
            f.PlacementTarget = sender as UIElement;

            //var parentGrid = ((FrameworkElement)this.Parent).FindName("FrameLayoutRoot") as Grid;

            //-------- This will add kind of animation in popup-------
            //var parentGrid = FrameLayoutRoot as Grid;

            //parentGrid.Children.Add(f.HostPopup);

            //f.Closed += (b, c) =>
            //{
            //    parentGrid.Children.Remove(f.HostPopup);
            //};
            //-----------------------------------------------------

            f.IsOpen = true;

            //ObjectTracker.Track(f);

            #region
            ////Flyout f = new Flyout();

            ////Grid g = new Grid();
            //g.Width = 300;
            //g.Height = 100;

            //TextBlock tblock = new TextBlock();
            //tblock.Text = "Compression Method:";
            //tblock.Foreground = new SolidColorBrush(Color.FromArgb(255, 0, 0, 0));
            //tblock.FontSize = 15;
            //tblock.VerticalAlignment = Windows.UI.Xaml.VerticalAlignment.Center;

            //List<string> lst = new List<string>() { "Deflate", "RAR", "BZip2", "GZip", "LZMA", "BCJ", "BCJ2", "PPMD" };
            ////ComboBox cb = new ComboBox();
            //cb.ItemsSource = lst;
            //cb.SelectedItem = lst.First();
            //cb.SelectionChanged += cb_SelectionChanged;

            //Grid g_temp = new Grid();
            //g_temp.Width = 20;

            //StackPanel sp_compressionMethod = new StackPanel();
            //sp_compressionMethod.Orientation = Orientation.Horizontal;
            //if (flag == true)
            //{
            //    sp_compressionMethod.Children.Add(tblock);
            //    sp_compressionMethod.Children.Add(g_temp);
            //    sp_compressionMethod.Children.Add(cb);
            //    flag = false;
            //}
            
            //sp_compressionMethod.HorizontalAlignment = Windows.UI.Xaml.HorizontalAlignment.Center;
            //sp_compressionMethod.VerticalAlignment = Windows.UI.Xaml.VerticalAlignment.Center;

            //if (g.Children == null)
            //{
            //    g.Children.Add(sp_compressionMethod);
            //}
            
            //f.Content = g;

            //f.Placement = PlacementMode.Top;
            //f.PlacementTarget = sender as UIElement;

            //f.IsOpen = true;
            ////f.Closed += f_Closed;
            #endregion
        }

        //void f_Closed(object sender, object e)
        //{
        //    f.Dispose();
        //}

        //public CompressionType selectedMethod = CompressionType.Deflate;
        //public void cb_SelectionChanged(object sender, SelectionChangedEventArgs e)
        //{
        //    if (cb.SelectedItem != null)
        //    {
        //        switch (cb.SelectedItem.ToString())
        //        {
        //            case "Deflate":
        //                selectedMethod = CompressionType.Deflate;
        //                break;

        //            case "RAR":
        //                selectedMethod = CompressionType.Rar;
        //                break;

        //            case "BZip2":
        //                selectedMethod = CompressionType.BZip2;
        //                break;

        //            case "GZip":
        //                selectedMethod = CompressionType.GZip;
        //                break;

        //            case "LZMA":
        //                selectedMethod = CompressionType.LZMA;
        //                break;

        //            case "BCJ":
        //                selectedMethod = CompressionType.BCJ;
        //                break;

        //            case "BCJ2":
        //                selectedMethod = CompressionType.BCJ2;
        //                break;

        //            case "PPMD":
        //                selectedMethod = CompressionType.PPMd;
        //                break;

        //            default:
        //                break;
        //        }
        //    }
        //}

    }
}
