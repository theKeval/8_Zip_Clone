using _8_Zip.Helper;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using Windows.Foundation;
using Windows.Foundation.Collections;
using Windows.Storage;
using Windows.UI.Popups;
using Windows.UI.Xaml;
using Windows.UI.Xaml.Controls;
using Windows.UI.Xaml.Controls.Primitives;
using Windows.UI.Xaml.Data;
using Windows.UI.Xaml.Input;
using Windows.UI.Xaml.Media;
using Windows.UI.Xaml.Navigation;

// The Basic Page item template is documented at http://go.microsoft.com/fwlink/?LinkId=234237

namespace _8_Zip
{
    /// <summary>
    /// A basic page that provides characteristics common to most applications.
    /// </summary>
    public sealed partial class ExtractHomePage : _8_Zip.Common.LayoutAwarePage
    {
        public ExtractHomePage()
        {
            this.InitializeComponent();
        }

        /// <summary>
        /// Populates the page with content passed during navigation.  Any saved state is also
        /// provided when recreating a page from a prior session.
        /// </summary>
        /// <param name="navigationParameter">The parameter value passed to
        /// <see cref="Frame.Navigate(Type, Object)"/> when this page was initially requested.
        /// </param>
        /// <param name="pageState">A dictionary of state preserved by this page during an earlier
        /// session.  This will be null the first time a page is visited.</param>
        protected override void LoadState(Object navigationParameter, Dictionary<String, Object> pageState)
        {
        }

        /// <summary>
        /// Preserves state associated with this page in case the application is suspended or the
        /// page is discarded from the navigation cache.  Values must conform to the serialization
        /// requirements of <see cref="SuspensionManager.SessionState"/>.
        /// </summary>
        /// <param name="pageState">An empty dictionary to be populated with serializable state.</param>
        protected override void SaveState(Dictionary<String, Object> pageState)
        {
        }

        public static StorageFolder openedFolder;
        public ObservableCollection<FileFolderModel> parameterContent;
        public ObservableCollection<FileFolderModel> parameterContent_1 = new ObservableCollection<FileFolderModel>();
        protected override void OnNavigatedTo(NavigationEventArgs e)
        {
            base.OnNavigatedTo(e);

            try
            {
                parameterContent = (ObservableCollection<FileFolderModel>) e.Parameter;
                gv_contentViewer.ItemsSource = parameterContent;

                openedFolder = HomePage.RootFolder;
            }
            catch (Exception ex)
            {
                MessageDialog ms = new MessageDialog(ex.Message);
                ms.ShowAsync();
            }
        }

        private async void gv_contentViewer_SelectionChanged_1(object sender, SelectionChangedEventArgs e)
        {
            try
            {

                if (gv_contentViewer.SelectedItem != null)
                {
                    var selectedFileFolder = (FileFolderModel) gv_contentViewer.SelectedItem;
                    
                    if (selectedFileFolder.isFolder)
                    {
                        openedFolder = await openedFolder.GetFolderAsync(selectedFileFolder.name);
                        parameterContent.Clear();

                        foreach (var item in await openedFolder.GetFoldersAsync())
                        {
                            parameterContent.Add(new FileFolderModel
                            {
                                name = item.Name,
                                isFolder = true
                            });
                        }

                        foreach (var item in await openedFolder.GetFilesAsync())
                        {
                            parameterContent.Add(new FileFolderModel
                            {
                                name = item.Name,
                                isFolder = false
                            });
                        }

                        gv_contentViewer.ItemsSource = parameterContent;

                    }
                    else
                    {

                    }
                }

            }
            catch (Exception ex)
            {
                MessageDialog ms = new MessageDialog(ex.Message);
                ms.ShowAsync();
            }
        }
    }
}
